// Recursion
class Solution {
    public int[] countBits(int n) {
        int arr[] = new int[n + 1];
        for(int i = 0; i <= n;i++){
            arr[i] = count(i);
        }
        return arr;
    }
    public static int count(int num){
        if(num == 0) return 0;
        if(num == 1) return 1;

        if(num % 2 == 0)       
            return count(num/2);
        else
            return 1 + count(num/2);
    }
}

// Dynamic Programming
class Solution {
    public int[] countBits(int n) {
        int arr[] = new int[n + 1];
        for(int i = 0; i <= n;i++){
            arr[i] = count(i,arr);
        }
        return arr;
    }
    public static int count(int num,int memo[]){
        if(num == 0) return 0;
        if(num == 1) return 1;

        if(memo[num] != 0) return memo[num];

        if(num % 2 == 0){    
            memo[num] = count(num/2,memo);
            return count(num/2,memo);
        }
        else{
            memo[num] = 1 + count(num/2,memo); 
            return 1 + count(num/2,memo);
        }
    }
}
