class Solution {
    public List<List<Integer>> levelOrder(TreeNode root) {
        List<List<Integer>> list = new LinkedList<>();
        Queue<TreeNode> queue = new LinkedList<>();

        if(root == null)    return list;
 
        queue.offer(root);
        while(!queue.isEmpty()){
            int nodesAtEachLevel = queue.size();
            List<Integer> subList = new LinkedList<>();
            for(int i = 0; i < nodesAtEachLevel;i++){
                if(queue.peek().left != null)
                    queue.offer((queue.peek().left));
                
                if(queue.peek().right != null)
                    queue.offer((queue.peek().right));                
                subList.add(queue.poll().val);
            }
            list.add(subList);
        }
        return list;
    }
}
Dry Run for example 
Input: root = [3,9,20,null,null,15,7]
Output: [[3],[9,20],[15,7]]

queue   --> 3 (root)
i = 0,i < nodesAtEachLevel = 1  (3)
  queue --> 9 20
  sublist [3]

list --> [3] 

subList -->[]
i = 0,i < nodesAtEachLevel = 2 (9,20)
 queue --> 15 7 
 sublist [9,20]

list --> [3,9,20]

subList -->[]
i = 0, i < nodesAtEachLevel = 2 (15,7) 
 queue --> 
 subList [15,7]

list -->[3,9,20,15,7]



